// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  // provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Quiz          Quiz[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id                 String     @id @default(cuid())
  title              String
  description        String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now()) @updatedAt
  questions          Question[]
  selectedQuestionId String?
  studied            Int?       @default(0)
  Folder             Folder?    @relation(fields: [folderId], references: [id])
  folderId           String?
  user               User?      @relation(fields: [userId], references: [id])
  userId             String?

  @@index([userId])
  @@index([folderId])
}

model Folder {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  quizes    Quiz[]
}

model Question {
  id      String  @id @default(cuid())
  order   Int
  title   String
  quiz    Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId  String?
  answer  String  @db.LongText
  learned Boolean @default(false)

  @@index([quizId])
}
